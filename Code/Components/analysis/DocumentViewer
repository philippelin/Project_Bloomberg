
import React, { useEffect, useState, useCallback, useMemo, useRef } from "react";
import { CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { FileText, ExternalLink, ArrowLeft, ArrowRight } from "lucide-react";
import { Button } from "@/components/ui/button";

export default function DocumentViewer({ document, highlightedPassages, selectedTheme }) {
  const [currentPage, setCurrentPage] = useState(1);
  const [currentPassageIndex, setCurrentPassageIndex] = useState(-1);
  const iframeRef = useRef(null);

  const currentPassage = useMemo(() => {
    if (!highlightedPassages || currentPassageIndex < 0) return null;
    return highlightedPassages[currentPassageIndex] || null;
  }, [highlightedPassages, currentPassageIndex]);

  // NEW: derive a findable phrase = first 5 words (normalized) of the passage
  const firstWordsForPdfSearch = useCallback((text = "", wordsCount = 5) => {
    if (!text) return "";
    const cleaned = String(text)
      .replace(/[\r\n]+/g, " ")          // newlines -> spaces
      .replace(/\u00AD/g, "")            // soft hyphens
      .replace(/\s+/g, " ")              // collapse spaces
      .replace(/(^[“”"']+|[“”"']+$)/g, "") // trim surrounding quotes
      .trim();
    const tokens = cleaned.split(" ").filter(Boolean);
    return tokens.slice(0, wordsCount).join(" ");
  }, []);

  const searchPhrase = useMemo(() => {
    return currentPassage?.text ? firstWordsForPdfSearch(currentPassage.text, 5) : "";
  }, [currentPassage, firstWordsForPdfSearch]);

  // Keep: PDF.js expects search params in the URL HASH
  const viewerUrl = useMemo(() => {
    if (!document?.file_url) return "";
    const baseUrl = "https://mozilla.github.io/pdf.js/web/viewer.html";
    const fileParam = `file=${encodeURIComponent(document.file_url)}`;

    const hash = new URLSearchParams();
    if (currentPage) hash.set("page", String(currentPage));
    if (searchPhrase) {
      hash.set("search", searchPhrase);
      hash.set("phrase", "true");            // exact contiguous phrase
      hash.set("caseSensitive", "false");
      hash.set("highlightAll", "true");      // show all matches (helps visibility)
    }

    return `${baseUrl}?${fileParam}#${hash.toString()}`;
  }, [document?.file_url, currentPage, searchPhrase]);

  const navigatePassage = useCallback((direction) => {
    const list = highlightedPassages || [];
    const newIndex = currentPassageIndex + direction;
    if (newIndex >= 0 && newIndex < list.length) {
      setCurrentPassageIndex(newIndex);
      const passage = list[newIndex];
      if (passage?.page_number) setCurrentPage(passage.page_number);
    }
  }, [currentPassageIndex, highlightedPassages]);

  // Auto-select first passage when theme changes
  useEffect(() => {
    const list = highlightedPassages || [];
    if (selectedTheme && list.length > 0) {
      setCurrentPassageIndex(0);
      if (list[0]?.page_number) setCurrentPage(list[0].page_number);
    } else {
      setCurrentPassageIndex(-1);
      setCurrentPage(1);
    }
  }, [selectedTheme, highlightedPassages]);

  // Force iframe reload whenever page or phrase changes to reliably trigger pdf.js find
  const iframeKey = useMemo(() => {
    return `${document?.id || "doc"}-${currentPage}-${currentPassageIndex}-${searchPhrase}`;
  }, [document?.id, currentPage, currentPassageIndex, searchPhrase]);

  if (!document) {
    return (
      <div className="h-full flex items-center justify-center bg-white/40 backdrop-blur-sm">
        <p className="text-slate-500">No document to display</p>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-slate-100 overflow-hidden">
      <CardHeader className="flex-shrink-0 border-b border-slate-200 bg-white/90 backdrop-blur-sm z-10">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-lg">
            <FileText className="w-5 h-5 text-slate-600" />
            Document Content
          </CardTitle>
          <div className="flex items-center gap-2">
            <Badge variant="outline">
              {highlightedPassages?.length ? `${highlightedPassages.length} passages` : "Original PDF"}
            </Badge>
            {currentPassage && searchPhrase && (
              <Badge className="text-xs bg-blue-100 text-blue-800">
                Highlighting first 5 words: "{searchPhrase.slice(0, 30)}..."
              </Badge>
            )}
            <Button
              variant="outline"
              size="sm"
              onClick={() => window.open(viewerUrl, "_blank")}
              className="text-slate-600"
            >
              <ExternalLink className="w-4 h-4 mr-2" />
              Open in New Tab
            </Button>
          </div>
        </div>
      </CardHeader>

      {selectedTheme && (highlightedPassages || []).length > 0 && (
        <div className="flex-shrink-0 border-b border-slate-200 bg-white/95 backdrop-blur-sm p-3 flex items-center justify-center gap-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigatePassage(-1)}
            disabled={currentPassageIndex <= 0}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Previous
          </Button>
          <div className="text-sm font-medium text-slate-700">
            Passage {currentPassageIndex + 1} of {(highlightedPassages || []).length}
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigatePassage(1)}
            disabled={currentPassageIndex >= (highlightedPassages || []).length - 1}
          >
            Next
            <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        </div>
      )}

      <div className="flex-1 p-4">
        <div className="w-full h-full">
          <iframe
            ref={iframeRef}
            key={iframeKey}
            src={viewerUrl}
            className="w-full h-full border rounded-lg bg-white shadow-lg"
            title="PDF Document Viewer"
            allow="fullscreen"
          />
        </div>
      </div>
    </div>
  );
}
