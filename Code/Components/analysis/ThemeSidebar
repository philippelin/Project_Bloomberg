
import React, { useState } from "react";
import { CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { InvokeLLM } from "@/integrations/Core";
import { BarChart3, TrendingUp, AlertTriangle, Target, DollarSign, Globe, Search, Loader2 } from "lucide-react";

const getThemeIcon = (themeName) => {
    if (!themeName || typeof themeName !== 'string') {
        return Target;
    }
    const name = themeName.toLowerCase();
    if (name.includes('market') || name.includes('trend')) return TrendingUp;
    if (name.includes('risk') || name.includes('crisis') || name.includes('volatility')) return AlertTriangle;
    if (name.includes('economic') || name.includes('macro') || name.includes('indicator')) return BarChart3;
    if (name.includes('earnings') || name.includes('revenue') || name.includes('profit') || name.includes('corporate')) return DollarSign;
    if (name.includes('global') || name.includes('international')) return Globe;
    return Target;
};

export default function ThemeSidebar({ themes = [], selectedTheme, onThemeSelect, document }) {
    const [customTheme, setCustomTheme] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [customThemes, setCustomThemes] = useState([]);

    const searchCustomTheme = async () => {
        if (!customTheme.trim() || !document?.content) return;
        
        setIsSearching(true);
        try {
            const result = await InvokeLLM({
                prompt: `Find all passages in this document related to the theme: "${customTheme}".
Return exact text and a relevance score (0-1), and include the page number.

Document content:
${document.content}`,
                response_json_schema: {
                    type: "object",
                    properties: {
                        passages: {
                            type: "array",
                            items: {
                                type: "object",
                                properties: {
                                    text: { type: "string" },
                                    relevance_score: { type: "number" },
                                    page_number: { type: "number" }
                                },
                                required: ["text", "relevance_score"]
                            }
                        }
                    },
                    required: ["passages"]
                }
            });

            const cleanedPassages = (result.passages || []).filter(p => p && p.text);
            if (cleanedPassages.length > 0) {
                const newCustomTheme = {
                    id: `custom-${Date.now()}`,
                    name: customTheme.trim(),
                    description: `Custom search for "${customTheme.trim()}"`,
                    passages: cleanedPassages,
                    isCustom: true
                };
                
                setCustomThemes(prev => [...prev, newCustomTheme]);
                onThemeSelect(newCustomTheme);
                setCustomTheme('');
            }
        } catch (error) {
            console.error("Error searching custom theme:", error);
        } finally {
            setIsSearching(false);
        }
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') searchCustomTheme();
    };

    // Filter out any main themes without a title and normalize sub-themes
    const validMainThemes = (themes || []).filter(t => t && typeof t.theme_name === 'string' && t.theme_name.trim() !== '');
    const totalSubThemes = validMainThemes.reduce((acc, t) => 
        acc + ((t.sub_themes || []).filter(st => st && typeof st.name === 'string' && st.name.trim() !== '').length || 0), 0
    );
    const allClickableThemesCount = totalSubThemes + (customThemes || []).length;

    return (
        <div className="h-full flex flex-col">
            <CardHeader className="flex-shrink-0 border-b border-slate-200/60">
                <CardTitle className="flex items-center gap-2 text-lg">
                    <BarChart3 className="w-5 h-5 text-blue-600" />
                    Financial Themes
                </CardTitle>
                <p className="text-sm text-slate-500">
                    {allClickableThemesCount} selectable themes
                </p>
            </CardHeader>

            {/* Custom Theme Search */}
            <div className="flex-shrink-0 p-4 border-b border-slate-200/60 bg-slate-50/50">
                <div className="space-y-2">
                    <label htmlFor="custom-theme-input" className="text-sm font-medium text-slate-700">Search Custom Theme</label>
                    <div className="flex gap-2">
                        <Input
                            id="custom-theme-input"
                            placeholder="e.g. growth, inflation risk, margin..."
                            value={customTheme}
                            onChange={(e) => setCustomTheme(e.target.value)}
                            onKeyDown={handleKeyPress}
                            className="flex-1 bg-white"
                            disabled={isSearching}
                        />
                        <Button
                            onClick={searchCustomTheme}
                            disabled={!customTheme.trim() || isSearching}
                            size="sm"
                            className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"
                        >
                            {isSearching ? <Loader2 className="w-4 h-4 animate-spin" /> : <Search className="w-4 h-4" />}
                        </Button>
                    </div>
                </div>
            </div>

            {/* Themes list (hierarchical: main theme -> sub-themes) */}
            <ScrollArea className="flex-1">
                <div className="p-4 space-y-4">
                    {validMainThemes.length === 0 && customThemes.length === 0 ? (
                        <div className="text-center py-8">
                            <Target className="w-8 h-8 text-slate-400 mx-auto mb-3" />
                            <p className="text-slate-500 text-sm">No themes detected yet</p>
                            <p className="text-slate-400 text-xs mt-1">Try searching for a custom theme above</p>
                        </div>
                    ) : (
                        <>
                            {validMainThemes.map((theme, idx) => {
                                const IconComponent = getThemeIcon(theme.theme_name);
                                const subThemes = (theme.sub_themes || []).filter(st => st && typeof st.name === 'string' && st.name.trim() !== '');
                                return (
                                    <div key={`${theme.theme_name}-${idx}`} className="bg-white/70 border border-slate-200/60 rounded-lg p-3">
                                        <div className="flex items-start gap-2 mb-2">
                                            <div className="p-1 rounded bg-blue-50">
                                                <IconComponent className="w-4 h-4 text-blue-600" />
                                            </div>
                                            <div className="flex-1 min-w-0">
                                                <div className="flex items-center justify-between">
                                                    <h4 className="font-semibold text-sm text-slate-800 truncate">{theme.theme_name}</h4>
                                                    <Badge variant="secondary" className="text-xs">{subThemes.length} sub-themes</Badge>
                                                </div>
                                                {theme.theme_description && (
                                                    <p className="text-xs text-slate-600 mt-1 line-clamp-2">{theme.theme_description}</p>
                                                )}
                                            </div>
                                        </div>
                                        <div className="grid grid-cols-1 gap-2">
                                            {subThemes.length > 0 ? (
                                                subThemes.map((st) => {
                                                    const isSelected = selectedTheme?.id === st.id;
                                                    return (
                                                        <Button
                                                            key={st.id || `${st.name}-${idx}`}
                                                            variant="ghost"
                                                            className={`w-full justify-between text-left border h-auto p-3 transition-all duration-200 
                                                                ${isSelected 
                                                                    ? 'bg-blue-100 border-blue-300 shadow-sm text-blue-800'
                                                                    : 'bg-slate-50 hover:bg-slate-100 text-slate-700 border-transparent'
                                                                }`}
                                                            onClick={() => onThemeSelect(st)}
                                                        >
                                                            <span className={`flex-1 truncate ${isSelected ? 'font-semibold' : ''}`}>{st.name}</span>
                                                            <Badge variant="outline" className={`text-xs ml-2 ${isSelected ? 'bg-blue-200 text-blue-800 border-blue-300' : ''}`}>
                                                                {(st.passages || []).length} passages
                                                            </Badge>
                                                        </Button>
                                                    );
                                                })
                                            ) : (
                                                <div className="text-xs text-slate-500 text-center py-2">No sub-themes found for this category.</div>
                                            )}
                                        </div>
                                    </div>
                                );
                            })}

                            {customThemes.length > 0 && (
                                <div className="bg-purple-50/60 border border-purple-200 rounded-lg p-3">
                                    <div className="flex items-center gap-2 mb-2">
                                        <Search className="w-4 h-4 text-purple-600" />
                                        <h4 className="font-semibold text-sm text-slate-800">Custom Themes</h4>
                                    </div>
                                    <div className="grid gap-2">
                                        {customThemes.map((ct) => {
                                            const isSelected = selectedTheme?.id === ct.id;
                                            return (
                                                <Button
                                                    key={ct.id}
                                                    variant="ghost"
                                                    className={`w-full justify-between text-left border h-auto p-3 transition-all duration-200
                                                        ${isSelected 
                                                            ? 'bg-purple-100 border-purple-300 shadow-sm text-purple-800'
                                                            : 'bg-white hover:bg-purple-50 text-slate-700 border-transparent'
                                                        }`}
                                                    onClick={() => onThemeSelect(ct)}
                                                >
                                                    <span className={`flex-1 truncate ${isSelected ? 'font-semibold' : ''}`}>{ct.name}</span>
                                                    <Badge variant="outline" className={`text-xs ml-2 ${isSelected ? 'bg-purple-200 text-purple-800 border-purple-300' : ''}`}>
                                                        {(ct.passages || []).length} passages
                                                    </Badge>
                                                </Button>
                                            );
                                        })}
                                    </div>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </ScrollArea>
        </div>
    );
}
